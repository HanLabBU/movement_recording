classdef NiPulsePeriodic < hgsetget
   
    properties
        niDevice
        startTime
        currTime
        currFrame
        pulseStartFrame
        pulseEndFrame
        pulseLength
        OnorOff
        SwitchTime % indicates the time elapsed since the last switch of on/off
    end
    
    methods
        function obj = NiPulsePeriodic(varargin)
            if nargin
                obj.niDevice = NiPulseOutput(varargin{:});
            else % come back to this
                obj.niDevice = NiPulseOutput();
            end
            obj.niDevice.setup();
            addlistener(obj.niDevice,'FrameAcquired',@(src,evnt) loopEvnt(obj,src,evnt));
            obj.startTime = hat;
            obj.currTime = hat;
            obj.currFrame = 0;
        end
        
        % this function should update the pulse, turning it either on or
        % off, based on the time that has past in the experiment
        function loopEvnt(obj,~,~)
            obj.currFrame = obj.currFrame + 1;
            obj.currTime = hat;
            
        end
        %this nested function should allow the user to decide how often and
        %for how long the led on the NIDAQ board will pulse, using the
        %variables pulseInterval and pulseLength (not yet tested, so could
        %be erroneous)
        function pulseFrequency(obj, pulseInterval, pulseLength)
            ptime = obj.startTime;
            while hat > obj.startTime
                passedTime = hat - ptime;
                if passedTime == pulseInterval
                    ptime = hat;
                    obj.SwitchTime = hat - passedTime;
                    pulseTime(obj, pulseLength)
                end
            end
            function pulseTime(obj, pulseLength)
                obj.OnorOff = obj.nidevice.outputSingleScan;
                while obj.SwitchTime <= pulseLength %while the time since it was switched on is less than the pulseLength have the LED on
                    obj.nidevice.outputSingleScan = 1;
                    obj.SwitchTime = hat - passedTime;
                end
                if obj.SwitchTime > pulseLength %once the time since it was switched on is greater than the pulseLength, turn the LED off and reset SwitchTime
                    obj.OnorOff = 0;
                    obj.nidevice.outputSingleScan = 0;
                    obj.SwitchTime = 0; 
                end 
            end
        end
        %this function should in theory do the same thing as the above function
        %'pulseFrequency' but by using 'tic' 'toc'. t also has not yet been
        %tested and could be erroneous
        function pulseFrequency1(obj, pulseInterval, pulseLength)
            if hat == obj.startTime
            tstart = tic;
            end
            while hat > obj.startTime
                if toc(tstart) == pulseInterval
                    tbegin = tic;
                    while toc(tbegin) <= pulseLength
                        obj.nidevice.outputSingleScan = 1;
                    end
                    tstart = tic;
                end
            end
        end
    end
end